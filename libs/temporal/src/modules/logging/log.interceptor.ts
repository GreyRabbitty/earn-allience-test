import { Context } from '@temporalio/activity';
import {
  ActivityExecuteInput,
  ActivityInboundCallsInterceptor,
  Next,
} from '@temporalio/worker';

import { Logger } from '@app/logging';

/** An Activity Context with an attached logger */
export interface ContextWithLogger extends Context {
  logger: Logger;
}

/** Get the current Activity context with an attached logger */
export function getContext(): ContextWithLogger {
  return Context.current() as ContextWithLogger;
}

/** Logs Activity executions and their duration */
export class LogInterceptor implements ActivityInboundCallsInterceptor {
  public readonly logger;

  constructor(ctx: Context, pinoLogger: Logger) {
    this.logger = pinoLogger.logger.child({
      ...ctx.info.workflowExecution,
      activityId: ctx.info.activityId,
    });
    // Set a logger instance on the current Activity Context to provide
    // contextual logging information to each log entry generated by the Activity.
    (ctx as ContextWithLogger).logger = this.logger;
  }

  async execute(
    input: ActivityExecuteInput,
    next: Next<ActivityInboundCallsInterceptor, 'execute'>,
  ): Promise<unknown> {
    let error: any = undefined;
    const startTime = Date.now();
    try {
      return await next(input);
    } catch (err: any) {
      error = err;
      throw err;
    } finally {
      const durationMs = Date.now() - startTime;
      if (error) {
        this.logger
          .child({
            error: error.message,
            errorName: error.name,
            durationMs,
          })
          .error('activity failed');
      } else {
        this.logger
          .child({ durationMs })
          .info('activity completed', { durationMs });
      }
    }
  }
}
